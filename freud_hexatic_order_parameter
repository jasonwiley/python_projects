import numpy as np
import math
import freud
from freud import parallel
from matplotlib import pyplot as plt

# Load positions, box size, and quaternion data
positions = np.loadtxt("file_with_positions.txt",delimiter=",")
box_size = np.loadtxt("file_with_dimensions.txt",delimiter=",")
quaternions = np.loadtxt("file_with_quaternion_data.txt",delimiter=",")
# Create the box from matrix
# boxMatrix contains an arbitrarily oriented right-handed box matrix.
box=box_size
xy=(math.pi/180)*0
print('tilt')
print(xy)
box=freud.box.Box(Lx=box[0],Ly=box[1],is2D=True,xy=xy)
points1=np.column_stack((positions,np.zeros(len(positions))))
points1 = points1[:, :3]
quats = quaternions
points1=np.array(points1)
# Compute the hexatic order parameter
k=freud.order.Hexatic(k=6)
k.compute(system=(box,points1),neighbors=dict(r_max=7.7))
psi_k = k.particle_order
avg_psi_k = np.mean(psi_k)
psi_k=np.abs(psi_k)
avg_psi_k=np.abs(avg_psi_k)
print('average psi_k')
print(avg_psi_k)
positions = np.append(positions,[[99,99,0],[100,100,0]], axis=0)
psi_k = np.append(psi_k,[[0],[1]])
# Plot the hexatic order parameter
plt.scatter(positions[:,0], positions[:,1], c=psi_k, cmap='jet')
colorbar = plt.colorbar()
colorbar.set_label(r'$\psi$',fontweight='bold',fontsize='16')
colorbar.set_ticks([0, .25, .5, .75, 1], fontweight = 'bold', fontsize = '18')
colorbar.ax.set_yticklabels(colorbar.ax.get_yticklabels(),fontweight = 'bold')
#plt.title('Hexatic Order Parameter nG60 Avg_Psi_k = %s' % avg_psi_k)
x_ticks = ([-20, -10, 0, 10, 20])
y_ticks = ([-20, -10, 0, 10, 20])
plt.xlim(np.min(positions[:-2,0]),np.max(positions[:-2,0]))
plt.ylim(np.min(positions[:-2,1]),np.max(positions[:-2,1]))
plt.xlabel('X', fontweight = 'bold')
plt.ylabel('Y', fontweight = 'bold')
plt.xticks(x_ticks, fontweight = 'bold', fontsize = '12')
plt.yticks(y_ticks, fontweight = 'bold', fontsize = '12')
plt.gca().spines['top'].set_linewidth(2.5)
plt.gca().spines['bottom'].set_linewidth(2.5)
plt.gca().spines['left'].set_linewidth(2.5)
plt.gca().spines['right'].set_linewidth(2.5)
plt.minorticks_on()
plt.tick_params(which='both', direction='in',labelsize=14)
plt.xticks(fontweight='bold')
plt.yticks(fontweight='bold')
plt.show()
np.savetxt('psi_k.txt', psi_k, delimiter=',')
np.savetxt('avg_psi_k.txt', [avg_psi_k], delimiter=',')
